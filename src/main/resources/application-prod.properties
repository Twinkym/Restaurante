# =====================================================
# == CONFIGURACIÓN PARA ENTORNO DE PRODUCCIÓN (PROD) ==
# =====================================================

# Puerto del servidor para el despliegue en producción
server.port=80

# ---------------------------------------------
# -- BASE DE DATOS: CONFIGURAR MEDIANTE .env --
# ---------------------------------------------
# IMPORTANTE: No almacenar credenciales reales aquí.
# Configuración de la base de datos de PRODUCCIÓN (usar variables de entorno o .env seguro)
# usará otros datos, esto es mejor cambiarlo por las dos últimas líneas.
# ===============================================
# ================== Ejemplo: ===================
# ========== spring.datasource.url=${DB_URL} ====
# ==== spring.datasource.username=${DB_USER} ====
# ==== spring.datasource.password=${DB_PASS} ====
# ===============================================
# conexión mejorada por seguridad esto es en caso de usar spring-boot-starter-security.

# ---- LA CONFIGURACIÓN SEGURA PARA PRODUCCIÓN ----
# Válida que el esquema de la BD coincida con las entidades. No modifica nada.
# Los cambios en producción se gestionan con herramientas de migración (ej. Flyway o Liquibase).
# Validación estricta del esquema (no crea ni modifica).
spring.jpa.hibernate.ddl-auto=validate

# ----- SEGURIDAD -----
# No se recomienda mostrar SQL en producción por rendimiento y seguridad
# Ocultar sentencias SQL en consola/logs por seguridad y rendimiento.
spring.jpa.show-sql=false

# ------------------------------------------------
# ----- CONFIGURACIÓN THYMELEAF (PRODUCCIÓN) -----
# ------------------------------------------------

# Activar la caché de Thymeleaf en producción para mejor rendimiento
# (puede ser sobreescrito por línea de comandos).
spring.thymeleaf.cache=true

# --------------------------------------------
# ---------- LOGGING EN PRODUCCIÓN -----------
# --------------------------------------------
# Configuración de logs. Evitar mostrar logs DEBUG O TRACE innecesarios.
logging.level.root=INFO
logging.level.org.springframework.web=INFO

# Y redirigir los logs a un archivo (mejor que consola en producción
logging.file.name=logs/app-prod.log

# -----------------------------------------
# ----- HIKARICP (POOL DE CONEXIONES) -----
# -----------------------------------------
# Configuración de conexión HikariCP (ajustable)
# Con estos atributos creo que se configuran los tiempos de conexión del servidor o algo asi.
# lo del tamaño del pool tengo que mirarlo.
spring.datasource.hikari.connection-timeout=30000
spring.datasource.hikari.maximum-pool-size=10

# ------------------------------------------------
# ----- CONFIGURACIÓN SMTP PARA ENVIAR EMAILS ----
# ------------------------------------------------
# src/main/resources/application.properties

# --- Configuración SMTP para el envío de correos ...
# ¡IMPORTANTE!: Reemplazar estos valores con la configuración real del servidor SMTP.
# Si se utiliza Gmail, se necesitará generar una "contraseña de aplicación" o
# (NO RECOMENDABLE: permitir aplicaciones menos seguras.
#
# Servidor SMTP (ej: smtp.gmail.com para Gmail, smtp.office365.com para outlook/office 365)
spring.mail.host=smtp_host.com
# Puerto SMTP (ej.: 587 para TLS, 465 para SSL)
spring.mail.port=587
# Nombre de usuario de lal cuenta de correo
spring.mail.username=restaurante@example.com
# Contraseña de la cuenta de correo (o contraseña de aplicación para Gmail)
spring.mail.password=la contraseña del email
# Habilitar autenticación SMTP
spring.mail.properties.mail.starttls.enable=true
# Valor de tiempo de espera para la conexión (en milisegundos)
spring.mail.properties.mail.smtp.connection-timeout=5000
# Valor de espera para el envío (en milisegundos)
spring.mail.properties.mail.smtp.timeout=5000
# Valor de tiempo de espera para la lectura (en milisegundos)
spring.mail.properties.mail.smtp.write-timeout=5000
# ¡Deshabilitar la verificación de host SSL (solo para desarrollo si se tienen problemas con certificados, NUNCA EN PRODUCCiÓN!!!!
# spring.mail.properties.mail.smtp.ssl.trust=smtp_host.com