# ====================================================
# == CONFIGURACIÓN PARA ENTORNO DE DESARROLLO (DEV) ==
# ====================================================

# Puerto del servidor
server.port=8080

# =====================================================
# ========= CONFIGURACIÓN DE ROLES Y USUARIOS =========
# =====================================================
app.user.default-role=DEV

# Configuración de base de datos MySQL LOCAL
# ---------------------------------------
# -- BASE DE DATOS: MySQL LOCAL (DEV) ---
# ---------------------------------------
# Configuración de base de datos MySQL LOCAL
spring.datasource.url=jdbc:mysql://localhost:3306/restaurante_db?createDatabaseIfNotExist=true
spring.datasource.username=root
spring.datasource.password=admin1234
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.jpa.hibernate.ddl-auto=create-drop
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect

# ---- LA CLAVE DE LA ESTABILIDAD EN DESARROLLO ----
# Borra (drop) y vuelve a crear (créate) el esquema en cada arranque.
# Garantiza una base de datos limpia siempre.


# Muestra el SQL en la consola para depuración
# Configuration de Thymeleaf para desarrollo (sin cachés)
# Cargar automáticamente el script data.sql después de que Hibernate cree las tablas
# Cargar automáticamente el script data.sql después de que Hibernate cree las tablas
spring.jpa.defer-datasource-initialization=true
spring.datasource.initialization-mode=always
spring.sql.init.mode=always
spring.sql.init.data-locations=classpath:data.sql


# Muestra el SQL en la consola para depuración

spring.jpa.properties.hibernate.format_sql=true

# ----------------------------------------
# -----CONFIGURACIÓN THYMELEAF (DEV) -----
# ----------------------------------------
# Configuración de Thymeleaf para desarrollo (sin cachés)
spring.thymeleaf.cache=false

# ------------------------------------------------
# ----- CONFIGURACIÓN SMTP PARA ENVIAR EMAILS ----
# ------------------------------------------------
# src/main/resources/application.properties

# --- Configuración SMTP para el envío de correos ...
# ¡IMPORTANTE!: Reemplazar estos valores con la configuración real del servidor SMTP.
# Si se utiliza Gmail, se necesitará generar una "contraseña de aplicación" o
# (NO RECOMENDABLE: permitir aplicaciones menos seguras.
#
# Servidor SMTP (ej: smtp.gmail.com para Gmail, smtp.office365.com para outlook/office 365)
spring.mail.host=smtp.gmail.com

# Puerto SMTP (ej.: 587 para TLS, 465 para SSL)
spring.mail.port=587
# Nombre de usuario de lal cuenta de correo
spring.mail.username=twinkymen55@gmail.com
# Contraseña de la cuenta de correo (o contraseña de aplicación para Gmail)
spring.mail.password=omnb pfsi xnso wbxv
# Habilitar autenticación SMTP
spring.mail.properties.mail.starttls.enable=true
# Valor de tiempo de espera para la conexión (en milisegundos)
spring.mail.properties.mail.smtp.connection-timeout=5000
# Valor de espera para el envío (en milisegundos)
spring.mail.properties.mail.smtp.timeout=5000
# Valor de tiempo de espera para la lectura (en milisegundos)
spring.mail.properties.mail.smtp.write-timeout=5000
# ¡Deshabilitar la verificación de host SSL (solo para desarrollo si se tienen problemas con certificados, NUNCA EN PRODUCCiÓN!!!!
spring.mail.properties.mail.smtp.ssl.trust=smtp_host.com


# ------------------------------------------------------------
# ----- HABILITA EL LOGGING DE LOS MAPEOS DE PETICIONES ------
# ------------------------------------------------------------
# Habilita el logging de los mapeos de peticiones (endpoints)
logging.level.org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping=INFO
logging.level.org.springframework.web.servlet.handler.AbstractUrlHandlerMapping=INFO
logging.level.org.springframework.web.servlet.DispatcherServlet=DEBUG

# Opcional: Aumentar el nivel de logging general de Spring si quieres más detalles
logging.level.org.springframework=INFO